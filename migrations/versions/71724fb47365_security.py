"""security

Revision ID: 71724fb47365
Revises: 5ff009c5f204
Create Date: 2023-02-04 21:43:47.843058

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '71724fb47365'
down_revision = '5ff009c5f204'
branch_labels = None
depends_on = None


def upgrade():
    op.rename_table('users','user')
    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.add_column(sa.Column('last_login_at', sa.DateTime(), nullable=True))
        batch_op.add_column(sa.Column('current_login_at', sa.DateTime(), nullable=True))
        batch_op.add_column(sa.Column('last_login_ip', sa.String(length=100), nullable=True))
        batch_op.add_column(sa.Column('current_login_ip', sa.String(length=100), nullable=True))
        batch_op.add_column(sa.Column('login_count', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('active', sa.Boolean(), nullable=True))
        batch_op.add_column(sa.Column('fs_uniquifier', sa.String(length=255), nullable=True))
        batch_op.add_column(sa.Column('confirmed_at', sa.DateTime(), nullable=True))

    op.execute("UPDATE public.user SET fs_uniquifier = email")

    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.alter_column('fs_uniquifier', nullable=False)
        batch_op.create_unique_constraint(batch_op.f('uq_users_fs_uniquifier'), ['fs_uniquifier'])

    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('role',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=80), nullable=True),
    sa.Column('description', sa.String(length=255), nullable=True),
    sa.Column('permissions', sa.UnicodeText(), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_role')),
    sa.UniqueConstraint('name', name=op.f('uq_role_name'))
    )
    op.create_table('roles_users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('role_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['role_id'], ['role.id'], name=op.f('fk_roles_users_role_id_role')),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name=op.f('fk_roles_users_user_id_user')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_roles_users'))
    )
    # ### end Alembic commands ###


def downgrade():
    op.rename_table('user','users')
    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.drop_column('last_login_at')
        batch_op.drop_column('current_login_at')
        batch_op.drop_column('last_login_ip')
        batch_op.drop_column('current_login_ip')
        batch_op.drop_column('login_count')
        batch_op.drop_column('login_count')
        batch_op.drop_column('active')
        batch_op.drop_column('fs_uniquifier')
        batch_op.drop_column('confirmed_at')
        batch_op.drop_constraint(batch_op.f('uq_users_fs_uniquifier'))


    # ### commands auto generated by Alembic - please adjust! ###
    
    op.drop_table('roles_users')
    op.drop_table('role')
    # ### end Alembic commands ###
